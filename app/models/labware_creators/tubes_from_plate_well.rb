# frozen_string_literal: true
module LabwareCreators
  # This class is used to transfer samples from a plate well into two tubes, each for a well.
  class TubesFromPlateWell < Base
    include LabwareCreators::WellFilterBehaviour

    REQUEST_TYPE = %w[kinnex_prep].freeze

    attr_reader :tube_transfer

    def self.support_parent?(parent)
      parent.plate?
    end

    def create_labware!
    end

    def redirection_target
      parent
    end

    def anchor
      'relatives_tab'
    end

    private

    # Returns the WellFilter instance associated with the labware creator.
    # If the WellFilter instance does not already exist, it initializes a new
    # instance of `LabwareCreators::WellFilterKinnex` with the current creator.
    #
    # @return [LabwareCreators::WellFilterKinnex] The WellFilter instance
    def well_filter
      @well_filter ||= LabwareCreators::WellFilterKinnex.new(creator: self)
    end

    # Transfers material from the parent plate to the child tubes.
    # This method should be invoked in the `create_transfer!` method after the child tubes have been created.
    # It is responsible for handling the transfer process, ensuring that the material
    # from the parent plate wells is correctly transferred to the corresponding child tubes.
    # @example Structure of `subject.filtered`
    #       # [
    #       #   [
    #       #     #<Sequencescape::Api::V2::Well: @attributes={
    #       #       "type" => "wells",
    #       #       "uuid" => "c9b0bb3d-8c57-4b6f-a6e5-5633d9fbd1cc",
    #       #       "name" => "K1",
    #       #       "position" => { "name" => "K1" },
    #       #       "state" => "passed",
    #       #       "diluent_volume" => nil,
    #       #       "pcr_cycles" => nil,
    #       #       "submit_for_sequencing" => nil,
    #       #       "sub_pool" => nil,
    #       #       "coverage" => nil
    #       #     }>,
    #       #     [
    #       #       #<Sequencescape::Api::V2::Request: @attributes={
    #       #         "type" => "requests",
    #       #         "uuid" => "request-0",
    #       #         "id" => "2",
    #       #         "role" => "WGS",
    #       #         "priority" => 0,
    #       #         "state" => "pending",
    #       #         "options" => {
    #       #           "pcr_cycles" => 10,
    #       #           "fragment_size_required_from" => 100,
    #       #           "fragment_size_required_to" => 200,
    #       #           "library_type" => "Sample Library Type"
    #       #         },
    #       #         "request_type" => #<Sequencescape::Api::V2::RequestType: @attributes={
    #       #           "type" => "request_types",
    #       #           "name" => "Request Type",
    #       #           "key" => "kinnex_prep",
    #       #           "for_multiplexing" => false
    #       #         }>,
    #       #         "pre_capture_pool" => nil,
    #       #         "submission" => nil,
    #       #         "primer_panel" => nil
    #       #       }>
    #       #     ]
    #       #   ]
    #       # ]
    #
    # @param child_uuid [String] The UUID of the child tubes to which the material will be transferred.
    def transfer_material_from_parent!(_child_uuid)
      well_filter.filtered.each_key do |well|
        tubes =
          Array.new(2) do
            Sequencescape::Api::V2::TubeFromPlateCreation.create!(
              child_purpose_uuid: purpose_uuid,
              parent_uuid: parent_uuid,
              user_uuid: user_uuid
            ).child
          end
        tubes.each do |tube|
          Sequencescape::Api::V2::TransferRequestCollection.create!(
            transfer_requests_attributes: [request_hash(well, tube, {})],
            user_uuid: user_uuid
          )
        end
      end
    end

    # Returns a hash representing a transfer request from a source well to a
    # destination tube. Additional parameters generated by the well filter are
    # merged into the request hash such as 'outer_request' and 'submission_id'.
    # This method assumes a direct stamp transfer i.e. A1 -> A1, B1 -> B1 etc.
    #
    # @param source_well [Sequencescape::Api::V2::Well] The source well.
    # @param destination_tube [Sequencescape::Api::V2::Tube] The destination plate.
    # @param additional_parameters [Hash] Additional parameters to include.
    # @return [Hash] A hash representing a transfer request.
    def request_hash(source_well, destination_tube, additional_parameters)
      { source_asset: source_well.uuid, target_asset: destination_tube.uuid }.merge(additional_parameters)
    end
  end
end
