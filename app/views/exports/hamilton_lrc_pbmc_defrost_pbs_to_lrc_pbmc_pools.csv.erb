<%# This is a picking file for a Hamilton robot for LRC PBMC Defrost plate to LRC PBMC Pools plate transfers %>
<%= CSV.generate_line [
    'Workflow',
    @workflow
  ],
  row_sep: ''
%>
<%= CSV.generate_line [], row_sep: "" %>
<%= CSV.generate_line [
    'Source Plate',
    'Source Well',
    'Destination Plate',
    'Destination Well',
    'Sample Volume (µL)',
    'Resuspension Volume (µL)',
  ],
  row_sep: ''
%>
<%
  # Configuration specific to this export

  args = Settings.purposes[@plate.purpose.uuid][:presenter_class][:args]
  default_required_number_of_cells = args[:default_required_number_of_cells]
  study_required_number_of_cells_key = args[:study_required_number_of_cells_key]

  maximum_sample_volume = 60.0  # microlitres
  resuspension_volume_per_sample = 2.2  # microlitres
  minimum_resuspension_volume = 10.0  # microlitres
  millilitres_to_microlitres = 1_000.0
  wastage_accountment = 0.95238 # Accounting for wastage of material during transfer between labware
  desired_chip_loading_concentration = 2400

  # Make a mapping { src_barcode => { src_location => src_well } }

  ancestor_plates_wells = @ancestor_plate_list.each_with_object({}) do |ancestor_plate, hash|
    hash[ancestor_plate.labware_barcode.human] = ancestor_plate.wells.index_by(&:location)
  end

  # Prepare the fields determined from the transfer requests

  transfer_request_data = []
  each_source_metadata_for_plate(@plate) do |src_barcode, src_location, dest_well|
    src_well = ancestor_plates_wells[src_barcode][src_location]
    cell_count = src_well.latest_total_cell_count  # cells / millilitres
    next if cell_count.nil?

    # Use the study's required number of cells if available, otherwise use the default

    poly_metadatum = src_well.aliquots.first.study.poly_metadatum_by_key(study_required_number_of_cells_key)
    study_required_number_of_cells = poly_metadatum&.value.to_i.nonzero?
    required_number_of_cells = study_required_number_of_cells || default_required_number_of_cells

    # Calculate the sample volume required for the number of cells

    required_volume = [millilitres_to_microlitres * required_number_of_cells / cell_count.value.to_i, maximum_sample_volume].min

    transfer_request_data << [
      src_barcode,
      src_location,
      @plate.labware_barcode.human,
      dest_well.location,
      '%0.2f' % required_volume,
      # We pass in the required number of cells so that we can calculate the resuspension volume later
      required_number_of_cells
    ]
  end

  # Calculate the resuspension volumes from the pooled samples count

  samples_by_dest_well = transfer_request_data.group_by { |tr| tr[3] }  # index by dest_well.location

  rows_array = transfer_request_data.map do |data|
    samples_in_pool = samples_by_dest_well[data[3]].count
    required_number_of_cells = data[5]
    resuspension_volume = [(samples_in_pool * required_number_of_cells * wastage_accountment) / desired_chip_loading_concentration, minimum_resuspension_volume].max
    # Replace required number of cells with resuspension volume
    data[5] = '%0.2f' % resuspension_volume
    data
  end
%>
<%= rows_array.sort_by{ |a| [ a[0], WellHelpers.well_coordinate(a[1])] }.map(&:to_csv).join %>