<%# Driver file for Hamilton robot to transfer from LRC PBMC Pools (or Input) to LRC GEM x 5P chip %>
<%= CSV.generate_line [
    'Workflow',
    @workflow
  ],
  row_sep: ''
%>
<%= CSV.generate_line [], row_sep: "" %>
<%= CSV.generate_line [
                        'Source Plate ID',
                        'Source Plate Well',
                        'Destination Plate ID',
                        'Destination Plate Well',
                        'Source Well Volume',
                        'Sample Volume',
                        'PBS Volume',

                      ],
                      row_sep: ""
%>
<%
  # Constants from config/initializers/scrna_config.rb
  scrna_config = Rails.application.config.scrna_config

  # fetch constants from scrna_config for use in calculations on source wells below
  required_number_of_cells_per_sample_in_pool = scrna_config[:required_number_of_cells_per_sample_in_pool]
  wastage_factor = scrna_config[:wastage_factor]
  desired_chip_loading_concentration = scrna_config[:desired_chip_loading_concentration]
  desired_chip_loading_volume = scrna_config[:desired_chip_loading_volume]
  volume_taken_for_cell_counting = scrna_config[:volume_taken_for_cell_counting]
  number_of_cells_per_chip_well_key = scrna_config[:number_of_cells_per_chip_well_key]

  # Destination wells are mapped to numbers: A1 -> 17, A2 -> 18, ..., A8 -> 24
  mapping = (1..8).each_with_object({}) { |i, hash| hash["A#{i}"] = (16 + i).to_s }

  # Make a mapping { src_location => src_well  }
  ancestral_plate_wells = @ancestor_plate.wells.index_by(&:location)
  rows_array = []
  each_source_metadata_for_plate(@plate) do |src_barcode, src_location, dest_well|
    src_well = ancestral_plate_wells[src_location]
    number_of_samples =  src_well.aliquots.length

    # Use the source well's number_of_cells_per_chip_well if available, otherwise error.
    # Value should have been calculated and stored on the pool well polymetadata.
    well_poly_metadatum = src_well.poly_metadatum_by_key(number_of_cells_per_chip_well_key)

    # raise error if polymetadata is missing
    raise "Missing poly metadata for number of cells per chip well for #{src_barcode} #{src_location}, " \
            'cannot generate driver file' unless well_poly_metadatum

    # extract value from the polymetadata
    number_of_cells_per_chip_well = well_poly_metadatum&.value.to_f.nonzero?

    # calculations

    # calculate volume we believe is remaining in the source well
    resuspension_volume = (number_of_samples * required_number_of_cells_per_sample_in_pool * wastage_factor.call(number_of_samples)).to_f / desired_chip_loading_concentration
    source_well_volume = resuspension_volume - volume_taken_for_cell_counting

    # calculate volume of the source sample well to take to load onto the chip
    sample_volume = number_of_cells_per_chip_well/desired_chip_loading_concentration

    # calculate pbs buffer volume with which to top up the chip loading volume
    pbs_volume = desired_chip_loading_volume - sample_volume

    # add row to driver file output csv
    rows_array << [
      src_barcode,
      src_location,
      @plate.labware_barcode.human,
      mapping[dest_well.location],
       '%0.1f' % source_well_volume,
       '%0.1f' % sample_volume,
       '%0.1f' % pbs_volume
    ]
  end
%>
<% rows_array.each do |row| %>
<%= CSV.generate_line row, row_sep: "" %>
<% end %>
