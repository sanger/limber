inherit_from:
  - .rubocop_todo.yml
  - node_modules/@prettier/plugin-ruby/rubocop.yml
plugins:
  - rubocop-capybara
  - rubocop-performance
  - rubocop-rails
  - rubocop-rspec
  - rubocop-rspec_rails

AllCops:
  Exclude:
    - bin/**/*
    - node_modules/**/*
    - tmp/**/*
    - vendor/**/*
  NewCops: enable
Rails:
  Enabled: true
# We're not actually using Rails methods here.
Rails/InverseOf:
  Enabled: false
Rails/HasManyOrHasOneDependent:
  Enabled: false
Rails/FindBy:
  Enabled: false
Style/ClassAndModuleChildren:
  Enabled: false

# Only use shorthand hash syntax when all keys match the variables for better readability
Style/HashSyntax:
  EnforcedShorthandSyntax: consistent

# Filter out all the DSLs
Metrics/BlockLength:
  CountAsOne:
    - array
    - hash
    - heredoc
  AllowedMethods:
    - describe
    - context
    - background
    - scenario
    - namespace
    - task
    - included
    - shared_context
    - shared_examples
    - state_machine
    - configure
    - draw
    - feature
    - subject
    - let
    - let!
    - factory
    - define
    - guard
    - transient
    - it
  Exclude:
    - config/robots.rb
Metrics/ClassLength:
  CountAsOne:
    - array
    - hash
    - heredoc
Metrics/MethodLength:
  CountAsOne:
    - array
    - hash
    - heredoc

Naming/VariableNumber:
  CheckSymbols:
    false # Rubocop gets annoyed about our states. I'm disabling globally
    # as I'm honestly not that bothered.

RSpec/ContextWording:
  Prefixes:
    - for
    - if
    - unless
    - when
    - where
    - with
    - without

RSpec/DescribedClass:
  EnforcedStyle: described_class
  SkipBlocks: true # Addresses a known caveat with rspec-rails’s ‘controller` helper that runs its
  # block in a different context

RSpec/ExampleLength:
  CountAsOne:
    - array
    - hash
    - heredoc
    - method_call

RSpec/IndexedLet:
  Enabled: false # We have a lot of indexed lets in our specs, mostly based on wells or racked tubes

RSpec/LetBeforeExamples:
  Enabled: false # It can be helpful to have the let variables just before the relevant example

RSpec/ScatteredLet:
  Enabled: false # Disabling due to scattered lets not being such a big deal and the automated fix
  # being unreliable (see https://github.com/rubocop/rubocop-rspec/issues/1167).

RSpec/MultipleMemoizedHelpers:
  Max: 13 # Default is 5, but we have a lot of memoized helpers in our specs, I'm inclined to
  # disable this, but I think it's better to just increase the limit for now - 15 lets is a bit much
  # and probably indicates a deeper problem. If this happens, make another context group.

RSpec/NestedGroups:
  Max: 5 # Default is 3, but we have a lot of nested groups in our specs

RSpec/NamedSubject:
  EnforcedStyle: named_only
